buildscript {

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
        classpath 'us.kirchmeier:gradle-capsule-plugin:1.0.2'
        classpath 'gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.4.0'
    }

}


allprojects {

    group = 'org.example.tests-cucumber'
    version = new File("${rootDir}/VERSION.txt").text.trim()

    apply plugin: 'idea'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext.versions = [
        dropwizard: '0.9.2',
        orika     : '1.4.6',
        morphia   : '1.1.1',
        slf4j     : '1.7.13',
        spring    : '4.2.4.RELEASE',
        jackson   : '2.6.4',
        junit     : '4.12',
        assertj   : '3.3.0',
        mockito   : '1.10.19',
    ]

    project.ext.replaceDependencyGroupVersion = { DependencyResolveDetails details, String group, String version ->
        if (details.requested.group == group || details.requested.group.startsWith(group + ".")) {
            details.useVersion version
        }
    }

    // Maven plugin

    project.afterEvaluate {

        project.apply plugin: 'maven'

    }

    // Plugins to use with the java plugin

    project.afterEvaluate {

        if (project.pluginManager.hasPlugin("java")) {

            // Add common dependencies

            project.dependencies {

                testCompile "junit:junit:${project.versions.junit}"
                testCompile "org.assertj:assertj-core:${project.versions.assertj}"
                testCompile "org.mockito:mockito-core:${project.versions.mockito}"

            }

            // Versions plugin

            project.apply plugin: 'com.github.ben-manes.versions'

            // PMD plugin

            project.apply plugin: 'pmd'

            project.pmd {
                ignoreFailures = true
            }

            tasks.withType(Pmd) {
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            // Findbugs plugin

            project.apply plugin: 'findbugs'

            project.findbugs {
                effort = "max"

                ignoreFailures = true

            }

            tasks.withType(FindBugs) {
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            // JDepend

            project.apply plugin: 'jdepend'

            project.jdepend {
                ignoreFailures = true
            }

        }

        project.configurations.all {

            // Replace commons logging by slf4j, if present
            resolutionStrategy.dependencySubstitution {
                substitute module('commons-logging:commons-logging') with module("org.slf4j:jcl-over-slf4j:${project.versions.slf4j}")
            }

            // Override some dependency versions
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                project.replaceDependencyGroupVersion(details, 'com.fasterxml.jackson', project.versions.jackson)
                project.replaceDependencyGroupVersion(details, 'org.slf4j', project.versions.slf4j)
            }

        }

        // Shared Java compiler config
        project.tasks.withType(JavaCompile) {

            project.sourceCompatibility = '1.8'

            options.encoding = 'UTF-8'
            options.deprecation = true
            options.compilerArgs << '-parameters'
            options.compilerArgs << '-Werror'

        }

    }

}


project("${rootProject.name}-backend") {

    apply plugin: 'java'

    dependencies {

        compile "io.dropwizard:dropwizard-core:${versions.dropwizard}"
        compile "io.dropwizard:dropwizard-client:${versions.dropwizard}"
        compile "ma.glasnost.orika:orika-core:${versions.orika}"
        compile "org.mongodb.morphia:morphia:${versions.morphia}"
        compile "org.mongodb.morphia:morphia-logging-slf4j:${versions.morphia}"
        compile "org.slf4j:slf4j-api:${versions.slf4j}"
        compile "org.springframework:spring-context:${versions.spring}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${versions.jackson}"

        testCompile "org.assertj:assertj-core:${versions.assertj}"

    }

    task runBackend(type: JavaExec, description: 'Run backend server') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'io.testscucumber.backend.BackendApplication'

        args += ['serve', "${rootDir}/server-config.yml"]
    }

}


project("${rootProject.name}-ui") {

    apply plugin: 'java'
    apply plugin: 'com.google.osdetector'

    // Determine grunt command to lauch based on current OS
    def gruntCmd = 'grunt'
    if (osdetector.os == 'windows') {
        gruntCmd += '.cmd'
    }

    task uiClean(type: Exec, description: 'Clean UI') {
        commandLine gruntCmd, 'clean'
    }

    tasks.clean.dependsOn uiClean

    task uiDist(type: Exec, description: 'Build UI dist') {
        commandLine gruntCmd

        inputs.dir('app')
        inputs.dir('test')
        inputs.file('Gruntfile.js')

        outputs.dir('build/dist')
    }

    tasks.processResources.dependsOn uiDist

    project.afterEvaluate {

        project.sourceSets.main.resources.srcDir('build/dist')

    }

    task uiTest(type: Exec, description: 'Run UI tests') {
        commandLine gruntCmd, 'test'

        inputs.file uiDist
        outputs.file "${project.buildDir}/tests.flag"
    }

    tasks.uiTest.doLast {
        // Create and touch the flag file

        File flagFile = file("${project.buildDir}/tests.flag")

        logger.info("Creating flag file {}", flagFile)

        flagFile.getParentFile().mkdirs()
        flagFile.createNewFile()
        flagFile.setLastModified(System.currentTimeMillis())
    }

    tasks.check.dependsOn uiTest

    task uiDistZip(type: Zip, description: 'Assemble UI zip') {

        inputs.file uiDist
        outputs.file(archivePath)

        from uiDist
        into 'ui'

    }

    tasks.assemble.dependsOn uiDistZip

    configurations {
        archives
    }

    artifacts {
        archives uiDistZip
    }

}


project("${rootProject.name}-capsule") {

    apply plugin: "us.kirchmeier.capsule"

    dependencies {

        compile project(":${rootProject.name}-backend")
        compile project(":${rootProject.name}-ui")
        compile "io.dropwizard:dropwizard-assets:${versions.dropwizard}"

    }

    task fatCapsule(type: FatCapsule, description: 'Build Capsule') {

        applicationClass 'io.testscucumber.capsule.TestsCucumberApplication'

        capsuleManifest {
            minJavaVersion = '1.8.0'
        }

    }

    tasks.assemble.dependsOn fatCapsule

    task runCapsule(type: Exec, description: 'Run Capsule') {
        commandLine 'java', '-jar', fatCapsule.archivePath, 'server', "${rootDir}/server-config.yml"
    }

    tasks.runCapsule.dependsOn fatCapsule

}


project("${rootProject.name}-example-features") {

    apply plugin: 'groovy'

    dependencies {

        compile 'org.codehaus.groovy:groovy-all:2.4.5'
        compile 'info.cukes:cucumber-groovy:1.2.4'
        compile "org.slf4j:slf4j-api:${versions.slf4j}"
        compile "org.assertj:assertj-core:${versions.assertj}"

    }

    task runCucumber(type: JavaExec, description: 'Run Cucumber features') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'cucumber.api.cli.Main'

        args += [
            '--glue', 'classpath:io.testscucumber.examples',
            '--plugin', 'pretty',
            '--plugin', "html:${project.buildDir}/cucumber/html",
            '--plugin', "json:${project.buildDir}/cucumber/report.json",
            '--tags', '~@ignored',
            'src/features',
        ]

        ignoreExitValue = true

    }

    task dryRunCucumber(type: JavaExec, description: 'Dry run Cucumber features') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'cucumber.api.cli.Main'

        args += [
            '--glue', 'classpath:io.testscucumber.examples',
            '--plugin', 'pretty',
            '--plugin', "html:${project.buildDir}/cucumber-dry/html",
            '--plugin', "json:${project.buildDir}/cucumber-dry/report.json",
            '--dry-run',
            'src/features',
        ]

        ignoreExitValue = true

    }

}
