buildscript {

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
        classpath 'us.kirchmeier:gradle-capsule-plugin:1.0.2'
        classpath 'gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.4.0'
        classpath 'org.ajoberstar:gradle-git:1.5.1'
    }

}

/**
 * Replace version used by a group of dependencies.
 *
 * @param details Dependency details
 * @param group Group of the dependency
 * @param version Version to set
 */
void replaceDependencyGroupVersion(DependencyResolveDetails details, String group, String version) {
    if (details.requested.group == group || details.requested.group.startsWith(group + ".")) {
        details.useVersion version
    }
}


allprojects {

    group = 'io.zucchini-ui'

    apply plugin: 'idea'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext.versions = [
        dropwizard     : '1.0.0',
        orika          : '1.4.6',
        morphia        : '1.2.1',
        slf4j          : '1.7.21',
        spring         : '4.3.2.RELEASE',
        junit          : '4.12',
        assertj        : '3.5.2',
        mockito        : '1.10.19',
        junitQuickcheck: '0.6.1',
        capsule        : '1.0.3',
        groovy         : '2.4.7',
        cucumberGroovy : '1.2.4',
        jetty          : '9.3.9.v20160517',
    ]

    // Maven plugin

    project.afterEvaluate {

        project.apply plugin: 'maven'

    }

    // Plugins to use with the java plugin

    project.afterEvaluate {

        if (project.pluginManager.hasPlugin("java")) {

            // Add common dependencies

            project.dependencies {

                testCompile "junit:junit:${project.versions.junit}"
                testCompile "org.assertj:assertj-core:${project.versions.assertj}"
                testCompile "org.mockito:mockito-core:${project.versions.mockito}"

            }

            // Versions plugin

            project.apply plugin: 'com.github.ben-manes.versions'

            // PMD plugin

            project.apply plugin: 'pmd'

            project.pmd {
                ignoreFailures = true
            }

            tasks.withType(Pmd) {
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            // Findbugs plugin

            project.apply plugin: 'findbugs'

            project.findbugs {
                effort = "max"

                ignoreFailures = true

            }

            tasks.withType(FindBugs) {
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

        }

        project.configurations.all {

            resolutionStrategy {

                // Replace commons logging by slf4j, if present
                dependencySubstitution {
                    substitute module('commons-logging:commons-logging') with module("org.slf4j:jcl-over-slf4j:${project.versions.slf4j}")
                }

                // Override some dependency versions
                eachDependency { DependencyResolveDetails details ->
                    replaceDependencyGroupVersion(details, 'org.slf4j', project.versions.slf4j)
                }

            }

        }

        // Shared Java compiler config
        project.tasks.withType(JavaCompile) {

            project.sourceCompatibility = '1.8'

            options.encoding = 'UTF-8'
            options.deprecation = true
            options.compilerArgs << '-parameters'
            options.compilerArgs << '-Werror'

        }

    }

}


project("${rootProject.name}-backend") {

    apply plugin: 'java'

    dependencies {

        compile "io.dropwizard:dropwizard-core:${versions.dropwizard}"
        compile "ma.glasnost.orika:orika-core:${versions.orika}"
        compile "org.mongodb.morphia:morphia:${versions.morphia}"
        compile "org.mongodb.morphia:morphia-logging-slf4j:${versions.morphia}"
        compile "org.slf4j:slf4j-api:${versions.slf4j}"
        compile "org.springframework:spring-context:${versions.spring}"
        compile "org.eclipse.jetty.websocket:javax-websocket-server-impl:${versions.jetty}"

        testCompile "org.assertj:assertj-core:${versions.assertj}"
        testCompile "com.pholser:junit-quickcheck-core:${versions.junitQuickcheck}"
        testCompile "com.pholser:junit-quickcheck-generators:${versions.junitQuickcheck}"

    }

    task runBackend(type: JavaExec, description: 'Run backend server') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'io.zucchiniui.backend.BackendApplication'

        args += ['serve', "${rootDir}/server-config.yml"]
    }

    task runJsonImporter(type: JavaExec, description: 'Execute JsonImportTest') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'io.zucchiniui.backend.JsonImportTest'

        if (project.hasProperty('jsonFilePath')) {
            args = [jsonFilePath]
        }
    }
}


project("${rootProject.name}-frontend") {

    apply plugin: 'java'
    apply plugin: 'com.google.osdetector'

    // Determine grunt command to lauch based on current OS
    def gruntCmd = 'grunt'
    if (osdetector.os == 'windows') {
        gruntCmd += '.cmd'
    }

    // Determine npm command to lauch based on current OS
    def npmCmd = 'npm'
    if (osdetector.os == 'windows') {
        npmCmd += '.cmd'
    }

    // Determine bower command to lauch based on current OS
    def bowerCmd = 'bower'
    if (osdetector.os == 'windows') {
        bowerCmd += '.cmd'
    }

    task npmUpdate(type: Exec, description: 'NPM Update') {
        commandLine npmCmd, 'update'
    }

    task bowerUpdate(type: Exec, description: 'Bower Update') {
        commandLine bowerCmd, 'update'
    }

    task npmInstall(type: Exec, description: 'NPM Install') {
        commandLine npmCmd, 'install'
    }

    task bowerInstall(type: Exec, description: 'Bower Install') {
        commandLine bowerCmd, 'install'
    }

    task uiClean(type: Exec, description: 'Clean UI') {
        commandLine gruntCmd, 'clean'
    }

    tasks.clean.dependsOn uiClean

    task uiDist(type: Exec, description: 'Build UI dist') {
        commandLine gruntCmd

        inputs.dir('app')
        inputs.dir('test')
        inputs.file('Gruntfile.js')

        outputs.dir('build/dist')
    }

    tasks.processResources.dependsOn uiDist

    task uiTest(type: Exec, description: 'Run UI tests') {
        commandLine gruntCmd, 'test'

        inputs.file uiDist
        outputs.file "${project.buildDir}/tests.flag"
    }

    tasks.uiTest.doLast {
        // Create and touch the flag file

        File flagFile = file("${project.buildDir}/tests.flag")

        logger.info("Creating flag file {}", flagFile)

        flagFile.getParentFile().mkdirs()
        flagFile.createNewFile()
        flagFile.setLastModified(System.currentTimeMillis())
    }

    tasks.check.dependsOn uiTest

    project.afterEvaluate {

        project.sourceSets.main.resources.srcDir('build/dist')

    }

}


project("${rootProject.name}-capsule") {

    apply plugin: 'us.kirchmeier.capsule'
    apply plugin: 'org.ajoberstar.grgit'

    dependencies {

        compile project(":${rootProject.name}-backend")
        compile project(":${rootProject.name}-frontend")
        compile "io.dropwizard:dropwizard-assets:${versions.dropwizard}"

    }

    capsule.version = versions.capsule

    task fatCapsule(type: FatCapsule, description: 'Build Capsule') {

        applicationClass 'io.zucchiniui.capsule.ZucchiniUIApplication'

        capsuleManifest {
            minJavaVersion = '1.8.0'
        }

    }

    tasks.assemble.dependsOn fatCapsule

    // Get tag names from project version and Git branch
    def getTagNames = { ->
        List<String> tags = [project.version]

        String branchName = project.grgit.branch.current.name
        if (branchName == 'master') {
            tags << 'latest'
        } else {
            tags << "branch-${branchName}"
        }

        return tags
    }

    // Generate Docker tags from base repository and project name
    def getDockerTags = { ->
        String imageName = project.properties['docker.baseRepository'] + '/' + project.rootProject.name
        return getTagNames().collect { "${imageName}:$it" }
    }

    task runCapsule(type: Exec, description: 'Run Capsule', dependsOn: fatCapsule) {
        commandLine 'java', '-jar', fatCapsule.archivePath, 'server', "${rootDir}/server-config.yml"
    }

    task dockerBuild(type: Exec, description: 'Build Docker image', dependsOn: fatCapsule) {
        List<String> args = ['docker', 'build', '--build-arg', "VERSION=${project.version}"]
        args += getDockerTags().collect({ ['-t', it] }).flatten()
        args << '.'

        commandLine args
    }

    task dockerPush(description: 'Push Docker image', dependsOn: dockerBuild) {
        doLast {
            getDockerTags().forEach({ tag ->
                project.exec {
                    commandLine 'docker', 'push', tag
                }
            })
        }
    }

}


project("${rootProject.name}-example-features") {

    apply plugin: 'groovy'

    dependencies {

        compile "org.codehaus.groovy:groovy-all:${versions.groovy}"
        compile "info.cukes:cucumber-groovy:${versions.cucumberGroovy}"
        compile "org.slf4j:slf4j-api:${versions.slf4j}"
        compile "org.assertj:assertj-core:${versions.assertj}"

    }

    task runCucumber(type: JavaExec, description: 'Run Cucumber features') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'cucumber.api.cli.Main'

        args += [
            '--glue', 'classpath:io.zucchiniui.examples',
            '--plugin', 'pretty',
            '--plugin', "html:${project.buildDir}/cucumber/html",
            '--plugin', "json:${project.buildDir}/cucumber/report.json",
            '--tags', '~@ignored',
            'src/features',
        ]

        ignoreExitValue true

    }

    task dryRunCucumber(type: JavaExec, description: 'Dry run Cucumber features') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'cucumber.api.cli.Main'

        args += [
            '--glue', 'classpath:io.zucchiniui.examples',
            '--plugin', 'pretty',
            '--plugin', "html:${project.buildDir}/cucumber-dry/html",
            '--plugin', "json:${project.buildDir}/cucumber-dry/report.json",
            '--dry-run',
            'src/features',
        ]

        ignoreExitValue true

    }

}
